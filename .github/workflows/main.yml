name: Continuous Integration
#test
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test_no_backends:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        python-version:
          - "3.7"

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - uses: conda-incubator/setup-miniconda@v2
        with:
          mamba-version: "*"
          miniforge-version: latest
          miniforge-variant: Mambaforge
          channel-priority: strict
          activate-environment: ibis
          python-version: ${{ matrix.python-version }}
          environment-file: environment.yml
          condarc-file: ci/condarc

      - name: install ibis
        run: pip install .

      - name: run tests
        run: ./ci/run_tests.sh --numprocesses auto

      - name: pytest errors
        run: ./ci/pytest_errors.sh
        if: failure()

  test_no_backends_arm64:
    name: "Test ${{ matrix.pyver }} aarch64"
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix:
        pyver: ["3.7", "3.9"]
      fail-fast: false
    runs-on: ubuntu-latest
    env:
      py: /opt/python/${{ matrix.pyver }}/bin/python
      img: quay.io/pypa/manylinux2014_aarch64
    steps:
      - name: Checkout
        uses: actions/checkout@v2    
      - name: setuo miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          mamba-version: "*"
          miniforge-version: latest
          miniforge-variant: Mambaforge
          channel-priority: strict
          activate-environment: ibis
          python-version: ${{ matrix.pyver }}
          environment-file: environment.yml
          condarc-file: ci/condarc
      - name: Checkout submodules
        run: |
          git submodule init
          git submodule update
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
    
      - name: set up environment and run test
        run: |
            docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
            arm64v8/ubuntu \
            bash -exc 'apt update && \
            uname -m && \
            apt-get install -y python3-pip && \
            python -m pip install --upgrade pip setuptools wheel && \
            python -m pip install . && \
            python -m pip install pytest && \
            python -m pip install pytest-cov && \
            python -m pip install sqlalchemy && \
            python -m pip install pytest-mock && \
            ./ci/run_tests.sh'
     
